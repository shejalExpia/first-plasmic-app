// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: anqwo3UY8Xt2uhLRY4dUyg
// Component: pDrkoDKmfG
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 5GroU1xQ2m/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: anqwo3UY8Xt2uhLRY4dUyg/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: pDrkoDKmfG/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: tc8t7qIODeW/icon
import logoImgpngFBoMxWFwr from "./images/logoImgpng.png"; // plasmic-import: fBOMxWFwr/picture

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<"img">;
  button?: p.Flex<"button">;
};

export interface DefaultHomepageProps {
  className?: string;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  dataFetches?: PlasmicHomepage__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      {}
      {}

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__oYrCd)}
          >
            <img
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(defaultcss.img, sty.img)}
              src={logoImgpngFBoMxWFwr}
            />

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox__risrd)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__d9OoV)}
              >
                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(defaultcss.a, sty.link__x3Yer)}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(defaultcss.all, sty.svg__bymmD)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text___5NaBp
                    )}
                  >
                    {"Services"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(defaultcss.all, sty.svg__de7Af)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(defaultcss.a, sty.link__oyiNx)}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(defaultcss.all, sty.svg__c7Tp5)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__dIuv
                    )}
                  >
                    {"Features"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(defaultcss.all, sty.svg__dxmlB)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(defaultcss.a, sty.link___7H1Qt)}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(defaultcss.all, sty.svg__lWvOh)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__atXgq
                    )}
                  >
                    {"Company"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(defaultcss.all, sty.svg__gtAuQ)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(defaultcss.a, sty.link__eSaig)}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(defaultcss.all, sty.svg__nk3Pi)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text___591Q6
                    )}
                  >
                    {"Contact"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(defaultcss.all, sty.svg__rQ6C)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(defaultcss.a, sty.link__pcRf1)}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(defaultcss.all, sty.svg__kUQdo)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text___81Tsu
                    )}
                  >
                    {"Log in"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(defaultcss.all, sty.svg__nh74Y)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(defaultcss.a, sty.link__eqMtr)}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(defaultcss.all, sty.svg__ev5Jz)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__d0Xc0
                    )}
                  >
                    {"Sign up"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(defaultcss.all, sty.svg__rzsxZ)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>

              {false ? (
                <div className={classNames(defaultcss.all, sty.freeBox__tqkgl)}>
                  <button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames(
                      defaultcss.button,
                      defaultcss.__wab_text,
                      sty.button
                    )}
                  >
                    {"Sign up"}
                  </button>

                  <p.Stack
                    as={"a"}
                    hasGap={true}
                    className={classNames(defaultcss.a, sty.link__mFdxs)}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(defaultcss.all, sty.svg___9AiZm)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__wGqWn
                      )}
                    >
                      {"Log in"}
                    </div>

                    {false ? (
                      <IconIcon
                        className={classNames(defaultcss.all, sty.svg__jjGqb)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                </div>
              ) : null}
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "button"],
  img: ["img"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: "img";
  button: "button";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHomepage__Fetches;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
